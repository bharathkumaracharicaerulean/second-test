[package]
name = "staging-node-cli"
version = "3.0.0-dev"
authors.workspace = true
description = "Generic Substrate node implementation in Rust."
build = "build.rs"
edition.workspace = true
license.workspace = true
homepage.workspace = true
repository.workspace = true
publish = false

[lints]
workspace = true

[package.metadata.wasm-pack.profile.release]
# `wasm-opt` has some problems on linux, see
# https://github.com/rustwasm/wasm-pack/issues/781 etc.
wasm-opt = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[badges]
maintenance = { status = "actively-developed" }

[[bin]]
name = "substrate-node"
path = "bin/main.rs"
required-features = ["cli"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# third-party dependencies
array-bytes = { workspace = true }
clap = { workspace = true, features = ["derive"], optional = true }
clap_complete = { version = "4.4.6", optional = true }
futures = { workspace = true }
futures-util = "0.3.21"
log = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt-multi-thread"] }
jsonrpsee = { version = "0.16.2", features = ["server"] }
serde_json = "1.0"
serde = { version = "1.0", features = ["derive"] }
hex = "0.4.3"
codec = { package = "parity-scale-codec", version = "3.6.1", features = ["derive"] }

# Substrate dependencies
sp-core = { path = "../../primitives/core" }
sp-runtime = { path = "../../primitives/runtime" }
sp-timestamp = { path = "../../primitives/timestamp" }
sp-inherents = { path = "../../primitives/inherents" }
sp-keyring = { path = "../../primitives/keyring" }
sp-io = { path = "../../primitives/io" }
sp-consensus = { path = "../../primitives/consensus/common" }
sp-consensus-aura = { path = "../../primitives/consensus/aura" }
sp-consensus-slots = { path = "../../primitives/consensus/slots" }
sp-consensus-grandpa = { path = "../../primitives/consensus/grandpa" }
sp-api = { path = "../../primitives/api" }
sp-blockchain = { path = "../../primitives/blockchain" }

sc-cli = { path = "../../client/cli" }
sc-client-api = { path = "../../client/api" }
sc-consensus = { path = "../../client/consensus/common" }
sc-consensus-aura = { path = "../../client/consensus/aura" }
sc-consensus-grandpa = { path = "../../client/consensus/grandpa" }
sc-executor = { path = "../../client/executor" }
sc-network = { path = "../../client/network" }
sc-network-common = { path = "../../client/network/common" }
sc-network-sync = { path = "../../client/network/sync" }
sc-service = { path = "../../client/service" }
sc-telemetry = { path = "../../client/telemetry" }
sc-transaction-pool = { path = "../../client/transaction-pool" }
sc-transaction-pool-api = { path = "../../client/transaction-pool/api" }
sc-basic-authorship = { path = "../../client/basic-authorship" }
sc-consensus-slots = { path = "../../client/consensus/slots" }
sc-chain-spec = { path = "../../client/chain-spec" }

substrate-frame-rpc-system = { path = "../../utils/frame/rpc/system" }
prometheus-endpoint = { package = "substrate-prometheus-endpoint", path = "../../utils/prometheus" }

# Shared code between the staging node and kitchensink runtime:
kitchensink-runtime = { path = "../../runtime", default-features = true }
node-primitives = { path = "../../primitives", default-features = true }
node-rpc = { path = "../rpc", default-features = false }

# These testing-only dependencies are not exported by the Polkadot-SDK crate:
sc-service-test = { path = "../../client/service/test", default-features = false }

sc-utils = { path = "../../client/utils" }

[dev-dependencies]
assert_cmd = { workspace = true }
futures = { workspace = true }
nix = { features = ["signal"], workspace = true }
pretty_assertions.workspace = true
regex = { workspace = true }
serde_json = { workspace = true, default-features = true }
soketto = { workspace = true }
tempfile = { workspace = true }
tokio-util = { features = ["compat"], workspace = true }
wat = { workspace = true }

[build-dependencies]
substrate-build-script-utils = { path = "../../utils/build-script-utils" }

[features]
default = ["cli"]
cli = ["dep:clap", "dep:clap_complete"]
try-runtime = [
    "kitchensink-runtime/try-runtime",
]
