[package]
name = "staging-node-cli"
version = "3.0.0-dev"
authors.workspace = true
description = "Generic Substrate node implementation in Rust."
build = "build.rs"
edition.workspace = true
license = "GPL-3.0-or-later WITH Classpath-exception-2.0"
default-run = "substrate-node"
homepage.workspace = true
repository.workspace = true
publish = false

[lints]
workspace = true

[package.metadata.wasm-pack.profile.release]
# `wasm-opt` has some problems on linux, see
# https://github.com/rustwasm/wasm-pack/issues/781 etc.
wasm-opt = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[badges]
maintenance = { status = "actively-developed" }


[[bin]]
name = "substrate-node"
path = "bin/main.rs"
required-features = ["cli"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# third-party dependencies
array-bytes = { workspace = true, default-features = true }
clap = { features = ["derive", "env"], optional = true, workspace = true }
clap_complete = { version = "4.4.6", optional = true }
codec = { workspace = true, default-features = true }
futures = { workspace = true }
jsonrpsee = { features = ["server"], workspace = true }
log = { workspace = true, default-features = true }
rand = { workspace = true, default-features = true }
serde = { features = ["derive"], workspace = true, default-features = true }
serde_json = { workspace = true, default-features = true }

# Substrate dependencies
sc-cli = { workspace = true, default-features = true }
sc-client-api = { workspace = true }
sc-consensus = { workspace = true }
sc-executor = { workspace = true }
sc-network = { workspace = true }
sc-service = { workspace = true }
sc-telemetry = { workspace = true }
sc-transaction-pool = { workspace = true }
sc-transaction-pool-api = { workspace = true }
sp-api = { workspace = true }
sp-blockchain = { workspace = true }
sp-consensus = { workspace = true }
sp-core = { workspace = true }
sp-keyring = { workspace = true }
sp-runtime = { workspace = true }
substrate-build-script-utils = { workspace = true }
substrate-frame-rpc-system = { workspace = true }

# Shared code between the staging node and kitchensink runtime:
kitchensink-runtime = { path = "../runtime", default-features = false }
node-primitives = { path = "../primitives", default-features = true }
node-rpc = { path = "../rpc", default-features = false }

# These testing-only dependencies are not exported by the Polkadot-SDK crate:
sc-service-test = { path = "../../../client/service/test", default-features = false }
xcm = "0.0.1"
xcm-builder = "0.0.1"

[dev-dependencies]
assert_cmd = { workspace = true }
criterion = { features = ["async_tokio"], workspace = true, default-features = true }
futures = { workspace = true }
nix = { features = ["signal"], workspace = true }
pretty_assertions.workspace = true
regex = { workspace = true }
scale-info = { features = ["derive", "serde"], workspace = true, default-features = true }
serde_json = { workspace = true, default-features = true }
soketto = { workspace = true }
tempfile = { workspace = true }
tokio = { features = ["macros", "parking_lot", "time"], workspace = true, default-features = true }
tokio-util = { features = ["compat"], workspace = true }
wat = { workspace = true }

[build-dependencies]
substrate-build-script-utils = { workspace = true }

[features]
default = ["cli"]
cli = ["clap", "clap_complete"]
runtime-benchmarks = [
	"kitchensink-runtime/runtime-benchmarks",
]
try-runtime = [
	"kitchensink-runtime/try-runtime",
]

[[bench]]
name = "transaction_pool"
harness = false

[[bench]]
name = "block_production"
harness = false

[[bench]]
name = "executor"
harness = false
